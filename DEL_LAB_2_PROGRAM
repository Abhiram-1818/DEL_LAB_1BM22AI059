import numpy as np
import pandas as pd

class SingleLayerPerceptron:
    def __init__(self):
        self.weights = None
        self.bias = None

    def fit(self, weights, bias):
        self.weights = np.array(weights)  
        self.bias = bias                 

    def predict(self, X):
        linear_output = np.dot(X, self.weights) + self.bias
        return self._activation_function(linear_output)

    def _activation_function(self, x):
        """Binary step activation function."""
        return np.where(x >= 0, 1, 0) 

def load_data(filename):
    data = pd.read_csv(filename)
    X = data.iloc[:, :-1].values  
    y = data.iloc[:, -1].values   

    return X, y


def main():
    filename = input("Enter the path to the CSV file: ")

    try:
        X, y = load_data(filename)
    except Exception as e:
        print(f"Error loading data: {e}")
        return
    try:
        num_features = X.shape[1]
        weights = []
        for i in range(num_features):
            weight = float(input(f"Enter weight for feature {i + 1}: "))
            weights.append(weight)
        bias = float(input("Enter bias (b): "))
    except ValueError:
        print("Invalid input. Please enter numeric values.")
        return

    perceptron = SingleLayerPerceptron()
    perceptron.fit(weights, bias)

    predictions = perceptron.predict(X)

    for i, pred in enumerate(predictions):
        outcome = 'Class 1' if pred == 1 else 'Class 0'
        print(f"Sample {i + 1} Prediction: {outcome}")

    accuracy = np.mean(predictions == y) * 100
    print(f'Accuracy: {accuracy:.2f}%')

if __name__ == "__main__":
    main()
